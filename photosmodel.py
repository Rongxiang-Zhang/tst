# -*- coding: utf-8 -*-
"""photosmodel.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1kg7B9xlo9jsOwsnIgujlGF4LYEOXrsdd
"""

import tensorflow as tf

from tensorflow.keras import layers, models

from tensorflow.keras.preprocessing.image import ImageDataGenerator

import matplotlib.pyplot as plt
import numpy as np

# 加载 CIFAR-10 数据集
(x_train, y_train), (x_test, y_test) = tf.keras.datasets.cifar10.load_data()

# 将像素值标准化为 [0, 1]
x_train, x_test = x_train / 255.0, x_test / 255.0

# 显示训练数据中的前 10 张图片
plt.figure(figsize=(10,10))
for i in range(10):
    plt.subplot(5,5,i+1)
    plt.xticks([])
    plt.yticks([])
    plt.grid(False)
    plt.imshow(x_train[i])
    plt.xlabel(y_train[i])
plt.show()



model = models.Sequential()
model.add(layers.Conv2D(32, (3, 3), activation='relu', input_shape=(32, 32, 3)))
model.add(layers.MaxPooling2D((2, 2)))
model.add(layers.Conv2D(64, (3, 3), activation='relu'))
model.add(layers.MaxPooling2D((2, 2)))
model.add(layers.Conv2D(64, (3, 3), activation='relu'))

# 添加全连接层
model.add(layers.Flatten())
model.add(layers.Dense(64, activation='relu'))
model.add(layers.Dense(10))

# 查看模型架构
model.summary()

model.compile(optimizer='adam',
              loss=tf.keras.losses.SparseCategoricalCrossentropy(from_logits=True),
              metrics=['accuracy'])

history = model.fit(x_train, y_train, epochs=10,
                    validation_data=(x_test, y_test))

# 绘制训练准确率和损失
plt.plot(history.history['accuracy'], label='训练准确率')
plt.plot(history.history['val_accuracy'], label = '验证准确率')
plt.xlabel('Epoch')
plt.ylabel('Accuracy')
plt.ylim([0, 1])
plt.legend(loc='lower right')
plt.show()

# 绘制训练损失和验证损失
plt.plot(history.history['loss'], label='训练损失')
plt.plot(history.history['val_loss'], label = '验证损失')
plt.xlabel('Epoch')
plt.ylabel('Loss')
plt.legend(loc='upper right')
plt.show()

test_loss, test_acc = model.evaluate(x_test, y_test, verbose=2)
print(f"Test accuracy: {test_acc}")

model.save('my_cnn_model.h5')

model = tf.keras.models.load_model('my_cnn_model.h5')
predictions = model.predict(x_test)

# 使用测试集评估模型
test_loss, test_accuracy = model.evaluate(x_test, y_test, verbose=2)
print(f'Test loss: {test_loss}')
print(f'Test accuracy: {test_accuracy}')

from sklearn.metrics import confusion_matrix
import seaborn as sns

# 模型预测
y_pred = model.predict(x_test)
y_pred_classes = np.argmax(y_pred, axis=1)

# 生成混淆矩阵
conf_matrix = confusion_matrix(y_test, y_pred_classes)

# 绘制混淆矩阵图
plt.figure(figsize=(10,7))
sns.heatmap(conf_matrix, annot=True, fmt='d')
plt.ylabel('True Label')
plt.xlabel('Predicted Label')
plt.show()

from sklearn.metrics import classification_report

# 打印分类报告，包含精度、召回率、F1 分数
print(classification_report(y_test, y_pred_classes))

# 可视化部分预测结果
num_images = 20
plt.figure(figsize=(15,15))
for i in range(num_images):
    plt.subplot(5,5,i+1)
    plt.imshow(x_test[i])
    plt.title(f"True: {y_test[i][0]} \nPredict: {y_pred_classes[i]}")
    plt.axis('off')
plt.show()

# 绘制训练准确率和验证准确率
plt.plot(history.history['accuracy'], label='训练准确率')
plt.plot(history.history['val_accuracy'], label='验证准确率')
plt.xlabel('Epoch')
plt.ylabel('Accuracy')
plt.legend(loc='lower right')
plt.show()

# 绘制训练损失和验证损失
plt.plot(history.history['loss'], label='训练损失')
plt.plot(history.history['val_loss'], label='验证损失')
plt.xlabel('Epoch')
plt.ylabel('Loss')
plt.legend(loc='upper right')
plt.show()

# 找出预测错误的样本
incorrect_predictions = np.where(y_pred_classes != y_test[:,0])[0]

# 可视化预测错误的样本
num_errors = 10
plt.figure(figsize=(15,15))
for i in range(num_errors):
    plt.subplot(5,5,i+1)
    plt.imshow(x_test[incorrect_predictions[i]])
    plt.title(f"True: {y_test[incorrect_predictions[i]][0]} \nPredict: {y_pred_classes[incorrect_predictions[i]]}")
    plt.axis('off')
plt.show()

pip install scikeras

from sklearn.model_selection import cross_val_score
from tensorflow.keras.wrappers.scikit_learn import KerasClassifier

# 包装Keras模型，用于交叉验证
def create_model():
    model = models.Sequential()
    model.add(layers.Conv2D(32, (3, 3), activation='relu', input_shape=(32, 32, 3)))
    model.add(layers.MaxPooling2D((2, 2)))
    model.add(layers.Conv2D(64, (3, 3), activation='relu'))
    model.add(layers.MaxPooling2D((2, 2)))
    model.add(layers.Conv2D(64, (3, 3), activation='relu'))
    model.add(layers.Flatten())
    model.add(layers.Dense(64, activation='relu'))
    model.add(layers.Dense(10, activation='softmax'))
    model.compile(optimizer='adam',
                  loss='sparse_categorical_crossentropy',
                  metrics=['accuracy'])
    return model

# 使用KerasClassifier进行交叉验证
model = KerasClassifier(build_fn=create_model, epochs=10, batch_size=64, verbose=0)
scores = cross_val_score(model, x_train, y_train, cv=3)
print(f'Cross-validation accuracy scores: {scores}')
print(f'Average accuracy: {np.mean(scores)}')